---
# tasks file for zookeeper

- name: create deploy directories
  file: path={{ item }} state=directory mode=0755
  with_items:
  - "{{ zk_log_dir }}"
  - "{{ zk_data_dir }}"
  - "{{ zk_datalog_dir }}"
  - "{{ zk_run_dir }}"

# - name: deploy binary
#   copy: src="{{ resources_dir }}/zookeeper.tar.gz" dest="{{ deploy_dir }}/package" mode=0755 backup=yes

- include_vars: file={{ playbook_dir }}/conf/kafka_packages.yml

- name: extract zookeeper package
  unarchive:
    src: "{{ downloads_dir }}/{{ item.name }}-{{ item.version }}.tar.gz"
    dest: "{{ package_dir }}"
    copy: yes
  with_items: "{{ kafka_packages }}"
  when: item.name == "zookeeper"


- name: symlink install directory
  file: src={{ package_dir }}/{{ item.name }}-{{ item.version }} path={{ zk_link_dir }} state=link
  with_items: "{{ kafka_packages }}"
  when: item.name == "zookeeper"



- name: create zoo.cfg file
  template: src=zoo.cfg.j2 dest={{ zk_link_dir }}/conf/zoo.cfg mode=0644 backup=yes

- name: create log4j.properties file
  template: src=log4j.properties.j2 dest={{ zk_link_dir }}/conf/log4j.properties mode=0644 backup=yes

- name: create java.env file
  template: src=java.env.j2 dest=/{{ zk_link_dir }}/conf/java.env mode=0644 backup=yes

- name: create myid file
  template: src=myid.j2 dest={{ zk_data_dir }}/myid mode=0644 backup=yes

- name: create run zookeeper scripts file
  template: src=run_zookeeper.sh.j2 dest={{ zk_run_dir }}/run_zookeeper.sh mode=0766 backup=yes
